?plot
?curve
?median
?aov
op <- options(contrasts = c("contr.helmert", "contr.poly"))
op
( npk.aov <- aov(yield ~ block + N*P*K, npk) )
op
op$contrasts
op
names(op$contrasts)
yy=op$contrasts
yy
yy$unordered
yy$ordered
names(op$contrasts)
summary(npk.aov)
npk
library(MASS)
x <- rnorm(1000)y <- rnorm(1000)
x <- rnorm(1000)
y <- rnorm(1000)
truehist(c(x,y+3), nbins=25)
contour(dd <- kde2d(x,y))
image(dd)
x <- seq(1, 20, 0.5)
x
?rnorm
rnorm(x)
?rnorm
x
?lm
lrf <- loess(y~x, dum)
data(hills)
jills
hills
jills
splom(~hills)
pairs(hills)
attach(hills)
plot(dist, time)
identify(dist, time,row.names(hills))
q
bline(lm(time~dist))
abline(lm(time~dist))
plot(dist, time)
abline(lm(time~dist))
abline(lqs(time~dist),lty = 3, col = 4)
pi^(-2:2)
pi
3.1^2
data(geyser)
ls()
rm(list=ls())
data(geyser)
ls()
geyser
erupt <- cut(geyser$duration, breaks = 0:6)
erupt
erupt <- ordered(erupt, labels=levels(erupt))
erupt
table(erupt)
barplot(erupt)
barplot(vector(erupt))
barplot(as.vector(erupt))
erupt
tt <- table(erupt)
tt
a = as.vector(tt)
barplot(a)
erupt
data(painters)
painters
summary(painters)
attach(painters)
ss <- School
typeof(ss)
class(ss)
ss
table(ss)
mydat <- data.frame(MPG, Dist, Climb, Day = day)
day
postscript(file = "twoplot.ps")   # open a postscript devicepar(fig = c(0, 2/3, 0, 1))        # set a figure on the leftplot(x, y)                        # point plotpar(fig = c(2/3, 1, 0, 1))
ls()
dir()
par(fig = c(0, 2/3, 0, 1))        # set a figure on the leftplot(x, y)                        # point plotpar(fig = c(2/3, 1, 0, 1))
samp <- cbind(Infant.Mortality, matrix(rnorm(47*19), 47, 19))
swiss <- data.frame(Fertility = swiss.fertility, swiss.x)
library(swiss)
data(swiss)
swiss
swiss <- data.frame(Fertility = swiss.fertility, swiss.x)
data(swiss)
swiss
swiss.fertility
36*38*39*40
1452/12
121/8
121/9
15+22.5
121*2.5
121*2.5/60
6.25*35
70.963/2
40*64*64
?tdf
???tdf
?shapiro test
?shapiro.test
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(runif(100, min = 2, max = 4))
?f
?ft
?F
?median
x=rf(20, 10,20)
hist(x)
x
x=round(rf(20, 10,20))
x
x=round(rf(20, 5,20))
x
hist(x)
x=round(rf(30, 5,20))
x
x=round(rf(30, 5,20))
x
hist(x)
install.packages('nloptr')
?nloptr
??nloptr
library(nloptr)
?nloptr
res <- nloptr( x0=x0, #
               eval_f=eval_f, #
               eval_grad_f=eval_grad_f,#
               opts=opts)#
print( res )
library('nloptr')#
#
## Rosenbrock Banana function and gradient in separate functions#
eval_f <- function(x) {#
    return( 100 * (x[2] - x[1] * x[1])^2 + (1 - x[1])^2 )#
}#
#
eval_grad_f <- function(x) {#
    return( c( -400 * x[1] * (x[2] - x[1] * x[1]) - 2 * (1 - x[1]),#
                200 * (x[2] - x[1] * x[1])) )#
}#
# initial values#
x0 <- c( -1.2, 1 )#
#
opts <- list("algorithm"="NLOPT_LD_LBFGS",#
             "xtol_rel"=1.0e-8)#
# solve Rosenbrock Banana function#
res <- nloptr( x0=x0, #
               eval_f=eval_f, #
               eval_grad_f=eval_grad_f,#
               opts=opts)#
print( res )
> library(nloptr)
library(nloptr)
??optimize
optimize
?optimize
x = c(0,0,0,0)
y = c(93, 100, 0, 0, 18.1, 11.1, 18.1)
res = t.test(x,y)
res
res = t.test(x,y)
res
x
y
wilcox.test(y,x)
y
x
wilcox.test(y,x)
barplot(y)
boxplot(y)
z = c(93,100,18.1,11.1, 18.1)
wilcox.test(z,x)
64*64
34888/4096
25*17
4/3
4+4
4-3
4*3
4^2
(3+4)*2
sin(3)
pi
3.1415*2
pi*2
log(2)*sin(3)
?log
log(100, base=10)
log10(100)
?mean
factorial(4)
?median
?plot
pie(c(Sky = 78, "Sunny side of pyramid" = 17, "Shady side of pyramid" = 5),#
    init.angle = 315, col = c("deepskyblue", "yellow", "yellow3"), border = FALSE)
n <- 200#
pie(rep(1, n), labels = "", col = rainbow(n), border = NA,#
    main = "pie(*, labels=\"\", col=rainbow(n), border=NA,..")
?sin
x=333
x
dir()
ls()
y
x
pi=55
pi
y=55
55*.1
x='dadasdasdasd'
x
typeof(x)
x=4
typeof(x)
area = 4*5
area
base=4
altura=12
area = base * altu
area = base * altura
area
x=2
x^3
y=x^3
y
x
2*x^3 + x^2 - 2*x -3
z=2*x^3 + x^2 - 2*x -3
z
w=sin(3)
w
ls()
quit()
cov(1:3, 4:6)
?friedman.test
?mean
matrix(1:12, ncol=3)
x=matrix(1:12, ncol=3)
all(x)
as.list(x)
?plot
plot(1:10)
frame()
plot(1:10)
?frame
plot.new()
plot(1:10)
?plot
?mean
x = c(1,3,2,4,3,2)
unique(x)
?plot
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")#
points(x, cex = .5, col = "dark red")
dnrom
?dnorm
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
?return
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
source('p1.R')
